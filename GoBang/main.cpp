#include<iostream>
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<windows.h>
#include <vector>
#include "GameManager.h"
#include "Board.h"
#include "Player.h"

using namespace std;
const int N = 15;
Board Chess;

int main() {
	GameManager game;
	game.select_mode();
	Chess.show();
	game.play_game(game.m);
	return 0;
}







//### 1. 棋盘类（`Board`）
//
//* **属性 * *：
//- 一个二维数组（或等效数据结构）来表示棋盘状态，例如`int board[15][15]; `，其中0表示空位，1表示黑子，2表示白子。
//- 当前玩家（例如，通过枚举或整数来表示：0 = 无玩家，1 = 黑子，2 = 白子）。
//- 游戏状态（例如，枚举：进行中、白胜、黑胜、平局）。
//- 是否允许悔棋的标志。
//
//* **方法 * *：
//- 初始化棋盘。
//- 检查棋盘上某位置是否可以落子。
//- 在棋盘上落子。
//- 检查是否有玩家获胜（五子连珠）。
//- 悔棋（如果允许）。
//- 打印棋盘状态。
//
//### 2. 玩家类（`Player`）
//
//* **属性 * *：
//- 玩家类型（例如，枚举：人机、玩家1、玩家2）。
//- 玩家颜色（对应`Board`中的表示）。
//- 对于人机玩家，可能需要包含AI策略或难度等级。
//
//* **方法 * *：
//- 获取下一步棋的位置（对于人机玩家，这将是AI计算的结果；对于真实玩家，可能是从输入获取的）。
//
//### 3. 游戏管理类（`GameManager`）
//
//* **属性 * *：
//- 当前棋盘对象。
//- 当前玩家对象（或两个，一个用于玩家1，一个用于玩家2）。
//- 游戏模式（例如，枚举：人机对战、双人对战）。
//
//* **方法 * *：
//- 开始新游戏。
//- 切换玩家。
//- 处理玩家落子。
//- 检查游戏结束条件。
//- 显示游戏结果。
//- 处理悔棋请求。
//
//### 4. AI策略类（`AiStrategy`）
//
//* **属性 * *：
//- 可能包含用于AI决策的数据结构，如评估函数、搜索树等。
//
//* **方法 * *：
//- 计算最佳落子位置。
//- 评估棋盘状态（可选，用于搜索算法）。
//- 可能包含其他AI算法相关的方法。

